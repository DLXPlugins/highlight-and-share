{"version":3,"file":"826.js","mappings":"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","sources":["webpack://highlight-and-share/./node_modules/photoswipe/dist/photoswipe.esm.js"],"sourcesContent":["/*!\n  * PhotoSwipe 5.3.3 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {ElementProvider=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {ElementProvider=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","update","_updateAxis","dispatch","axis","elSize","data","panAreaSize","correctPan","panOffset","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Number","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","holderElement","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","supportsTouch","maxTouchPoints","drag","tapHandler","on","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","_currPositionIndex","_prevPositionIndex","appendHolders","i","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","_wasFocused","focus","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_helperTimeout","_finalizeAnimation","_finished","removeEventListener","SpringEaser","initialVelocity","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","init","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","off","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","supportsDecode","isDecoding","decode","catch","finally","appendImage","lazyLoadData","createContentFromData","zoomLevel","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","removeByIndex","indexToRemove","item","find","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","open","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_placeholder","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","listeners","refreshSlideContent","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"sourceRoot":""}